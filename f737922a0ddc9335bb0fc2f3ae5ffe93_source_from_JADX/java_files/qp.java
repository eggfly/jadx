import android.text.TextUtils;
import com.aide.common.f;
import com.aide.common.h;
import com.aide.ui.e;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.X509EncodedKeySpec;
import org.json.JSONObject;

public class qp {
    private static final byte[] DW;
    private static final byte[] FH;
    private static final byte[] Hw;
    private static final byte[] j6;

    static {
        j6 = new byte[]{(byte) 71, (byte) -17, (byte) -12, (byte) -126, (byte) 74, (byte) -10, (byte) 18, (byte) 110, (byte) 31, (byte) -27, (byte) 54, (byte) -23, (byte) 24, (byte) 27, (byte) -118, (byte) -39, (byte) 110, (byte) 118, (byte) 44, (byte) 12, (byte) 70, (byte) 68, (byte) 15, (byte) 40, (byte) 14, (byte) -13, (byte) 28, (byte) -107, (byte) 83, (byte) 106, (byte) -34, (byte) -27, (byte) 3, (byte) -65, (byte) 98, (byte) 39, (byte) -49, (byte) 77, (byte) -20, (byte) 114, (byte) -44, (byte) 95, (byte) -60, (byte) -101, (byte) 39, (byte) -120, (byte) -12, (byte) 51, (byte) -67, (byte) 104, (byte) -4, (byte) 114, (byte) 13, (byte) 7, (byte) 81, (byte) -100, (byte) 98, (byte) -10, (byte) 11, (byte) 63, (byte) 46, (byte) -5, (byte) -63, (byte) -52, (byte) 103, (byte) -38, (byte) 111, (byte) 31, (byte) -121, (byte) -61, (byte) -7, (byte) 73, (byte) 53, (byte) 94, (byte) 52, (byte) -125, (byte) 25, (byte) 34, (byte) 85, (byte) -75, (byte) 52, (byte) -91, (byte) 72, (byte) -102, (byte) 52, (byte) 45, (byte) 52, (byte) -80, (byte) -20, (byte) 3, (byte) 96, (byte) 24, (byte) -72, (byte) -27, (byte) 68, (byte) 124, (byte) -8, (byte) -87, (byte) -116, (byte) -27, (byte) 58, (byte) -99, (byte) -7, (byte) -8, (byte) 65, (byte) -80, (byte) -45, (byte) -19, (byte) -79, (byte) 42, (byte) 82, (byte) 85, (byte) 21, (byte) -68, (byte) 91, (byte) -64, (byte) -12, (byte) 74, (byte) -36, (byte) 31, (byte) 94, (byte) 115, (byte) 73, (byte) -51, (byte) -34, (byte) -107, (byte) -25, (byte) 69, (byte) -117, (byte) 15, (byte) -9, (byte) -49, (byte) 89, (byte) -34, (byte) -81, (byte) -46, (byte) -59, (byte) 70, (byte) -55, (byte) 48, (byte) 67, Byte.MAX_VALUE, (byte) -12, (byte) 78, (byte) 124, (byte) -17, (byte) 28, (byte) -113, (byte) -91, (byte) -84, (byte) 7, (byte) 82, (byte) -71, (byte) -95, (byte) -21, (byte) 103, (byte) -66, (byte) -106, (byte) -122, (byte) -50, (byte) -51, (byte) -55, (byte) 48, (byte) 11, (byte) -102, (byte) 7, (byte) 10, (byte) -8, (byte) -53, (byte) -2, (byte) 79, (byte) -105, (byte) -76, (byte) 109, (byte) -93, (byte) -75, Byte.MAX_VALUE, (byte) -114, (byte) -2, (byte) -107, (byte) -97, (byte) -94, (byte) 90, (byte) 0, (byte) -33, (byte) 13, (byte) -102, (byte) 7, (byte) 75, (byte) -74, (byte) -78, (byte) 32, (byte) 40, (byte) 99, (byte) 108, (byte) -96, (byte) 54, (byte) -100, (byte) -10, (byte) 5, (byte) -14, (byte) -14, (byte) -95, (byte) 89, (byte) 15, (byte) -28, (byte) -81, (byte) -100, (byte) 72, (byte) 71, (byte) -64, (byte) 122, (byte) -103, (byte) 15, (byte) 108, (byte) -12, (byte) -121, (byte) -32, (byte) 107, (byte) 21, (byte) -25, (byte) -21, (byte) -39, (byte) -46, (byte) 99, (byte) -17, (byte) 83, (byte) -89, (byte) 112, (byte) 99, (byte) 75, (byte) -24, (byte) 75, (byte) 25, (byte) 43, (byte) -29, (byte) 24, (byte) -24, (byte) 52, (byte) 0, (byte) 66, (byte) 93, (byte) -59, (byte) 76, (byte) 88, (byte) -75, (byte) 73, (byte) 80, (byte) 32, (byte) -29, (byte) 29, (byte) 96, (byte) 32, (byte) 70, (byte) -25, (byte) -66, (byte) -126, (byte) 14, (byte) -124, (byte) 17, (byte) -126, (byte) -121, (byte) 122, (byte) 111, (byte) -42, (byte) -46, (byte) -86, Byte.MAX_VALUE, (byte) 49, (byte) -99, (byte) 109, (byte) 9, (byte) 40, (byte) 29, (byte) 120, (byte) -7, (byte) -115, (byte) 26, (byte) -60, (byte) -52, (byte) -110, (byte) 23, (byte) -15, (byte) 43, (byte) 64, (byte) 27, (byte) 102, (byte) 4, (byte) -49, (byte) -121, (byte) -41, (byte) -126, (byte) 20, (byte) 100, (byte) 13, (byte) 7, (byte) -77, (byte) 15, (byte) 2, (byte) -61, (byte) 8, (byte) -101, (byte) -58, (byte) -102, (byte) 19, (byte) 121, (byte) -108, (byte) 59, (byte) -29, (byte) 79, (byte) -109, (byte) 24, (byte) 38, (byte) -115, (byte) 64, (byte) -121, (byte) 7, (byte) 19, (byte) 5, (byte) 50, (byte) 117, (byte) 70, (byte) -50, (byte) -127, (byte) 9, (byte) -52, (byte) -100, (byte) -18, (byte) 43, (byte) -34, (byte) 19, (byte) -107, (byte) -34, (byte) 37, (byte) -101, (byte) -20, (byte) -43, (byte) 9, (byte) 39, (byte) 126, (byte) 95, (byte) 76, (byte) -16, (byte) 111, (byte) 84, (byte) 112, (byte) 16, (byte) 39, (byte) 17, (byte) 120, (byte) 62, (byte) -77, (byte) -98, (byte) -59, (byte) -50, (byte) -74, (byte) -102, (byte) -66, (byte) -71, (byte) 29, (byte) 60, (byte) 96, (byte) -54, (byte) -107, (byte) -39, (byte) -83, (byte) 5, (byte) -6, (byte) 94, (byte) 124, (byte) 95, (byte) -106, (byte) -29, (byte) -105, (byte) -107, (byte) 111, (byte) -12, (byte) 104, (byte) -14, (byte) -75, (byte) 62, (byte) 75, (byte) 115, (byte) -23, (byte) 10, (byte) -46, (byte) 31, (byte) -4, (byte) 81, (byte) 118, (byte) 115, (byte) -83};
        DW = new byte[]{(byte) 71, (byte) -17, (byte) -12, (byte) -126, (byte) 74, (byte) -10, (byte) 18, (byte) 110, (byte) 31, (byte) -27, (byte) 54, (byte) -23, (byte) 24, (byte) 27, (byte) -118, (byte) -39, (byte) 110, (byte) 118, (byte) 44, (byte) 12, (byte) 70, (byte) 68, (byte) 15, (byte) 40, (byte) 14, (byte) -13, (byte) 28, (byte) -107, (byte) 83, (byte) 106, (byte) -34, (byte) -27, (byte) 3, (byte) -65, (byte) 98, (byte) 39, (byte) -49, (byte) 77, (byte) -20, (byte) 114, (byte) -44, (byte) 95, (byte) -60, (byte) -101, (byte) 36, (byte) -37, (byte) -4, (byte) 8, (byte) -95, (byte) 80, (byte) -13, (byte) 96, (byte) 28, (byte) 44, (byte) 43, (byte) -127, (byte) 71, (byte) -18, (byte) 44, (byte) 43, (byte) 104, (byte) -48, (byte) -103, (byte) -127, (byte) 36, (byte) -35, (byte) 64, (byte) 1, (byte) -72, (byte) -82, (byte) -94, (byte) 125, (byte) 54, (byte) 55, (byte) 14, (byte) -86, (byte) 28, (byte) 44, (byte) 13, (byte) -121, (byte) 21, (byte) -86, (byte) 70, (byte) -121, (byte) 18, (byte) 121, (byte) 40, (byte) -12, (byte) -84, (byte) 59, (byte) 65, (byte) 34, (byte) -57, (byte) -119, (byte) 56, (byte) 35, (byte) -105, (byte) -7, (byte) -103, (byte) -114, (byte) 7, (byte) -6, (byte) -102, (byte) -121, (byte) 78, (byte) -48, (byte) -98, (byte) -20, (byte) -30, (byte) 13, (byte) 63, (byte) 21, (byte) 62, (byte) -27, (byte) 84, (byte) -107, (byte) -14, (byte) 120, (byte) -11, (byte) 44, (byte) 112, (byte) 9, (byte) 62, (byte) -58, (byte) -67, (byte) -117, Byte.MIN_VALUE, (byte) 67, (byte) -79, (byte) 6, (byte) -98, (byte) -66, (byte) 114, (byte) -17, (byte) -75, (byte) -45, (byte) -119, (byte) 112, (byte) -120, (byte) 43, (byte) 120, (byte) 22, (byte) -55, (byte) 19, (byte) 58, (byte) -103, (byte) 94, (byte) -117, (byte) -79, (byte) -85, (byte) 41, (byte) 79, (byte) -125, (byte) -37, (byte) -57, (byte) 73, (byte) -101, (byte) -112, Byte.MIN_VALUE, (byte) -24, (byte) -87, (byte) -103, (byte) 29, (byte) 120, (byte) -75, (byte) 36, (byte) 123, (byte) -14, (byte) -48, (byte) -55, (byte) 64, (byte) -73, (byte) -77, (byte) 74, (byte) -103, (byte) -79, (byte) 67, (byte) -112, (byte) -104, (byte) -90, (byte) -119, (byte) -116, (byte) 67, (byte) 25, (byte) -23, (byte) 8, (byte) -82, (byte) 81, (byte) 74, (byte) -4, (byte) -61, (byte) 26, (byte) 57, Byte.MAX_VALUE, (byte) 116, (byte) -124, (byte) 109, (byte) -109, (byte) -52, (byte) 57, (byte) -73, (byte) -64, (byte) -13, (byte) 57, (byte) 70, (byte) -53, (byte) -55, (byte) -89, Byte.MAX_VALUE, (byte) 28, (byte) -44, (byte) 45, (byte) -105, (byte) 117, (byte) 89, (byte) -63, (byte) -82, (byte) -15, (byte) 85, (byte) 14, (byte) -34, (byte) -105, (byte) -49, (byte) -49, (byte) 100, (byte) -9, (byte) 18, (byte) -124, (byte) 65, (byte) 49, (byte) 94, (byte) -13, (byte) 74, (byte) 21, (byte) 12, (byte) -28, (byte) 48, (byte) -46, (byte) 82, (byte) 37, (byte) 98, (byte) 38, (byte) -109, (byte) 40, (byte) 111, (byte) -70, (byte) 24, (byte) 16, (byte) 56, (byte) -10, (byte) 25, (byte) 111, (byte) 7, (byte) 57, (byte) -36, (byte) -76, (byte) -108, (byte) 62, (byte) -110, (byte) 95, (byte) -117, (byte) -75, (byte) 90, (byte) 92, (byte) -42, (byte) -47, (byte) -98, (byte) 68, (byte) 16, (byte) -17, (byte) 125, (byte) 5, (byte) 5, (byte) 90, (byte) 94, (byte) -6, (byte) -30, (byte) 87, (byte) -103, (byte) -47, (byte) -32, (byte) 44, (byte) -19, (byte) 61, (byte) 103, (byte) 19, (byte) 98, (byte) 24, (byte) -57, (byte) -9, (byte) -23, (byte) -123, (byte) 16, (byte) 72, (byte) 45, (byte) 33, (byte) -103, (byte) 12, (byte) 19, (byte) -8, (byte) 60, (byte) -124, (byte) -124, (byte) -110, (byte) 102, (byte) 48, (byte) -106, (byte) 85, (byte) -55, (byte) 89, (byte) -106, (byte) 6, (byte) 42, (byte) -120, (byte) 113, (byte) -31, (byte) 57, (byte) 107, (byte) 36, (byte) 66, (byte) 70, (byte) 0, (byte) -49, (byte) -24, (byte) 60, (byte) -127, (byte) -92, (byte) -18, (byte) 106, (byte) -36, (byte) 6, (byte) -64, (byte) -88, (byte) 125, (byte) -71, (byte) -63, (byte) -57, (byte) 56, (byte) 21, (byte) 125, (byte) 1, (byte) 98, (byte) -116, (byte) 57, (byte) 95, (byte) 120, (byte) 43, (byte) 98, (byte) 114, (byte) 68, (byte) 94, Byte.MIN_VALUE, (byte) -3, (byte) -33, (byte) -26, (byte) -2, (byte) -100, (byte) -105, (byte) -110, (byte) 79, (byte) 61, (byte) 106, (byte) -37, (byte) -24, (byte) -12, (byte) -114, (byte) 0, (byte) -35, (byte) 62, (byte) 82, (byte) 62, (byte) -52, (byte) -46, (byte) -90, (byte) -17, (byte) 126, (byte) -89, (byte) 89, (byte) -13, (byte) -66, (byte) 21, (byte) 109, (byte) 47, (byte) -92, (byte) 71, (byte) -46, (byte) 31, (byte) -4, (byte) 81, (byte) 118, (byte) 115, (byte) -83};
        FH = new byte[]{(byte) 71, (byte) -17, (byte) -12, (byte) -126, (byte) 74, (byte) -10, (byte) 18, (byte) 110, (byte) 31, (byte) -27, (byte) 54, (byte) -23, (byte) 24, (byte) 27, (byte) -118, (byte) -39, (byte) 110, (byte) 118, (byte) 44, (byte) 12, (byte) 70, (byte) 68, (byte) 15, (byte) 40, (byte) 14, (byte) -13, (byte) 28, (byte) -107, (byte) 83, (byte) 106, (byte) -34, (byte) -27, (byte) 3, (byte) -65, (byte) 98, (byte) 39, (byte) -49, (byte) 77, (byte) -20, (byte) 114, (byte) -44, (byte) 95, (byte) -60, (byte) -101, (byte) 60, (byte) -107, (byte) -11, (byte) 23, (byte) -30, (byte) 110, (byte) -38, (byte) 84, (byte) 3, (byte) 40, (byte) 86, (byte) -123, (byte) 77, (byte) -27, (byte) 53, (byte) 53, (byte) 23, (byte) -38, (byte) -10, (byte) -69, (byte) 70, (byte) -106, (byte) 90, (byte) 88, (byte) -88, (byte) -104, (byte) -99, (byte) 56, (byte) 45, (byte) 115, (byte) 37, (byte) -69, (byte) 28, (byte) 20, (byte) 12, (byte) -86, (byte) 27, (byte) -108, (byte) 61, (byte) -39, (byte) 49, (byte) 69, (byte) 19, (byte) -113, (byte) -103, (byte) 5, (byte) 84, (byte) 49, (byte) -75, (byte) -26, (byte) 24, (byte) 79, (byte) -25, (byte) -126, (byte) -66, (byte) -112, (byte) 90, (byte) -7, (byte) -87, (byte) -80, (byte) 83, (byte) -77, (byte) -97, (byte) -51, (byte) -120, (byte) 95, (byte) 83, (byte) 18, (byte) 40, (byte) -6, (byte) 107, (byte) -48, (byte) -81, (byte) 118, (byte) -2, (byte) 41, (byte) 124, (byte) 22, (byte) 75, (byte) -50, (byte) -117, (byte) -50, (byte) -71, (byte) 122, (byte) -125, (byte) 48, (byte) -103, (byte) -21, (byte) 119, (byte) -59, (byte) -87, (byte) -74, (byte) -98, (byte) 110, (byte) -45, (byte) 118, (byte) 108, (byte) 115, (byte) -8, (byte) 122, (byte) 30, (byte) -120, (byte) 124, (byte) -84, (byte) -87, (byte) -78, (byte) 21, (byte) 103, (byte) -121, (byte) -96, (byte) -44, (byte) 106, (byte) -63, (byte) -107, (byte) -123, (byte) -15, (byte) -97, (byte) -2, (byte) 58, (byte) 87, (byte) -77, (byte) 0, (byte) 96, (byte) -32, (byte) -21, (byte) -43, (byte) 59, (byte) -96, (byte) -84, (byte) 45, (byte) -35, (byte) -77, (byte) 97, (byte) -69, (byte) -69, (byte) -113, (byte) -75, Byte.MIN_VALUE, (byte) 80, (byte) 63, (byte) -15, (byte) 32, (byte) -121, (byte) 54, (byte) 16, (byte) -81, (byte) -77, (byte) 7, (byte) 32, (byte) 68, (byte) 0, (byte) -86, (byte) 53, (byte) -121, (byte) -13, (byte) 13, (byte) -28, (byte) -54, (byte) -107, (byte) 69, (byte) 15, (byte) -33, (byte) -101, (byte) -81, (byte) 122, (byte) 80, (byte) -64, (byte) 18, (byte) -75, (byte) 49, (byte) 10, (byte) -122, (byte) -105, (byte) -58, (byte) 96, (byte) 29, (byte) -26, (byte) -110, (byte) -7, (byte) -55, (byte) 80, (byte) -42, (byte) 111, (byte) -70, (byte) 122, (byte) 126, (byte) 0, (byte) -106, (byte) 35, (byte) 35, (byte) 12, (byte) -31, (byte) 82, (byte) -34, (byte) 119, (byte) 34, (byte) 100, (byte) 18, (byte) -120, (byte) 103, (byte) 44, (byte) -89, (byte) 16, (byte) 98, (byte) 1, (byte) -51, (byte) 48, (byte) 107, (byte) 10, (byte) 21, (byte) -72, (byte) -11, (byte) -83, (byte) 60, (byte) -111, (byte) 61, (byte) -106, (byte) -85, (byte) 97, (byte) 77, (byte) -71, (byte) -94, (byte) -104, (byte) 70, (byte) 34, (byte) -62, (byte) 77, (byte) 27, (byte) 0, (byte) 77, (byte) 126, (byte) -31, (byte) -21, (byte) 22, (byte) -34, (byte) -11, (byte) -4, (byte) 94, (byte) -109, (byte) 24, (byte) 68, (byte) 106, (byte) 104, (byte) 4, (byte) -61, (byte) -34, (byte) -17, (byte) -30, (byte) 46, (byte) 103, (byte) 18, (byte) 56, (byte) -20, (byte) 13, (byte) 27, (byte) -41, (byte) 18, (byte) -63, (byte) -82, (byte) -55, (byte) 6, (byte) 11, (byte) -84, (byte) 36, (byte) -63, (byte) 104, (byte) -72, (byte) 71, (byte) 14, (byte) -3, (byte) 25, (byte) -59, (byte) 85, (byte) 106, (byte) 11, (byte) 101, (byte) 55, (byte) 12, (byte) -120, (byte) -126, (byte) 44, (byte) -77, Byte.MIN_VALUE, (byte) -111, (byte) 60, (byte) -20, (byte) 36, (byte) -40, (byte) -86, (byte) 8, (byte) -124, (byte) -109, (byte) -37, (byte) 40, (byte) 50, (byte) 62, (byte) 118, (byte) 70, (byte) -109, (byte) 53, (byte) 82, (byte) 8, (byte) 34, (byte) 88, (byte) 54, (byte) 110, (byte) 35, (byte) -90, (byte) -67, (byte) -37, (byte) -52, (byte) -73, (byte) -85, (byte) -126, (byte) -12, (byte) 85, (byte) 53, (byte) 78, (byte) -59, (byte) -13, (byte) -17, (byte) -37, (byte) 21, (byte) -67, (byte) 8, (byte) 41, (byte) 47, (byte) -19, (byte) -12, (byte) -110, (byte) -77, (byte) 1, (byte) -7, (byte) 56, (byte) -31, (byte) -121, (byte) 37, (byte) 123, (byte) 79, (byte) -33, (byte) 3, (byte) -46, (byte) 31, (byte) -4, (byte) 81, (byte) 118, (byte) 115, (byte) -83};
        Hw = new byte[]{(byte) 71, (byte) -17, (byte) -12, (byte) -126, (byte) 74, (byte) -10, (byte) 18, (byte) 110, (byte) 31, (byte) -27, (byte) 54, (byte) -23, (byte) 24, (byte) 27, (byte) -118, (byte) -39, (byte) 110, (byte) 118, (byte) 44, (byte) 12, (byte) 70, (byte) 68, (byte) 15, (byte) 40, (byte) 14, (byte) -13, (byte) 28, (byte) -107, (byte) 83, (byte) 106, (byte) -34, (byte) -27, (byte) 3, (byte) -65, (byte) 98, (byte) 39, (byte) -49, (byte) 77, (byte) -20, (byte) 114, (byte) -44, (byte) 95, (byte) -60, (byte) -101, (byte) 34, (byte) -122, (byte) -99, (byte) 49, (byte) -94, (byte) 80, (byte) -17, (byte) 102, (byte) 42, (byte) 2, (byte) 88, (byte) -95, (byte) 49, (byte) -6, (byte) 72, (byte) 54, (byte) 54, (byte) -43, (byte) -32, (byte) -88, (byte) 88, (byte) -122, (byte) 112, (byte) 8, (byte) -65, (byte) -78, (byte) -65, (byte) 98, (byte) 50, (byte) 47, (byte) 113, (byte) -88, (byte) 120, (byte) 15, Byte.MAX_VALUE, (byte) -10, (byte) 14, (byte) -78, (byte) 85, (byte) -98, (byte) 25, (byte) 41, (byte) 1, (byte) -81, (byte) -85, (byte) 32, (byte) 99, (byte) 59, (byte) -70, (byte) -7, (byte) 64, (byte) 87, (byte) -48, (byte) -123, (byte) -124, (byte) -99, (byte) 10, (byte) -6, (byte) -101, (byte) -26, (byte) 94, (byte) -111, (byte) -43, (byte) -39, (byte) -71, (byte) 45, (byte) 93, (byte) 73, (byte) 19, (byte) -123, (byte) 3, (byte) -105, (byte) -64, (byte) 123, (byte) -59, (byte) 38, (byte) 91, (byte) 118, (byte) 60, (byte) -23, (byte) -96, (byte) -70, (byte) -115, (byte) 4, (byte) -102, (byte) 10, (byte) -9, (byte) -2, (byte) 122, (byte) -80, (byte) -79, (byte) -90, (byte) -117, (byte) 116, (byte) -56, (byte) 23, (byte) 125, (byte) 40, (byte) -1, (byte) 19, (byte) 0, (byte) -119, (byte) 0, (byte) -111, (byte) -107, (byte) -92, (byte) 11, (byte) 71, (byte) -71, (byte) -35, (byte) -29, (byte) 105, (byte) -73, (byte) -105, (byte) -2, (byte) -127, (byte) -113, (byte) -38, (byte) 47, (byte) 4, (byte) -73, (byte) 55, (byte) 9, (byte) -126, (byte) -68, (byte) -44, (byte) 67, (byte) -96, (byte) -92, (byte) 126, (byte) -89, (byte) -13, (byte) 34, (byte) -73, (byte) -101, (byte) -42, (byte) -78, (byte) -96, (byte) 51, (byte) 7, (byte) -25, (byte) 29, (byte) -67, (byte) 53, (byte) 57, (byte) -109, (byte) -65, (byte) 24, (byte) 36, (byte) 113, (byte) 96, (byte) -85, (byte) 105, (byte) -127, (byte) -112, (byte) 89, (byte) -11, (byte) -24, (byte) -93, (byte) 124, (byte) 8, (byte) -3, (byte) -112, (byte) -96, (byte) 97, (byte) 71, (byte) -26, (byte) 7, (byte) -124, (byte) 119, (byte) 106, (byte) -30, (byte) -103, (byte) -39, (byte) 102, (byte) 59, (byte) -36, (byte) -111, (byte) -4, (byte) -4, (byte) 123, (byte) -50, (byte) 79, (byte) -89, (byte) 94, (byte) 83, (byte) 105, (byte) -9, (byte) 18, (byte) 31, (byte) 115, (byte) -49, (byte) 81, (byte) -99, (byte) 78, (byte) 20, Byte.MAX_VALUE, (byte) 58, (byte) -64, (byte) 85, (byte) 114, (byte) -65, (byte) 56, (byte) 107, (byte) 59, (byte) -49, (byte) 122, (byte) 78, (byte) 33, (byte) 32, (byte) -25, (byte) -96, (byte) -124, (byte) 8, (byte) -102, (byte) 14, (byte) -73, (byte) -32, (byte) 67, (byte) 87, (byte) -67, (byte) -22, (byte) -118, (byte) 77, (byte) 15, (byte) -55, (byte) 101, (byte) 20, (byte) 53, (byte) 114, (byte) 7, (byte) -24, (byte) -105, (byte) 46, (byte) -98, (byte) -33, (byte) -20, (byte) 22, (byte) -3, (byte) 52, (byte) 77, (byte) 28, (byte) 71, (byte) 1, (byte) -13, (byte) -50, (byte) -21, (byte) -18, (byte) 20, (byte) 92, (byte) 114, (byte) 102, Byte.MIN_VALUE, (byte) 4, (byte) 112, (byte) -70, (byte) 26, (byte) -33, (byte) -82, (byte) -42, (byte) 21, (byte) 25, (byte) -85, (byte) 17, (byte) -10, (byte) 18, (byte) -29, (byte) 14, (byte) 112, (byte) -121, (byte) 123, (byte) -113, (byte) 39, (byte) 47, (byte) 24, (byte) 50, (byte) 58, (byte) 66, (byte) -111, (byte) -96, (byte) 50, (byte) -99, (byte) -109, (byte) -26, (byte) 56, (byte) -50, (byte) 33, (byte) -36, (byte) -70, (byte) 25, (byte) -102, (byte) -39, (byte) -16, (byte) 105, (byte) 5, (byte) 8, (byte) 0, (byte) 120, (byte) -100, (byte) 29, (byte) 51, (byte) 105, (byte) 49, (byte) 123, (byte) 125, (byte) 60, (byte) 20, (byte) -94, (byte) -69, (byte) -60, (byte) -20, (byte) -66, (byte) -98, (byte) -127, (byte) -116, (byte) 64, (byte) 10, (byte) 40, (byte) -8, (byte) -52, (byte) -53, (byte) -37, (byte) 55, (byte) -59, (byte) 28, (byte) 67, (byte) 3, (byte) -49, (byte) -64, (byte) -64, (byte) -19, (byte) 82, (byte) -44, (byte) 99, (byte) -37, Byte.MIN_VALUE, (byte) 38, (byte) 69, (byte) 119, (byte) -38, (byte) 22, (byte) -46, (byte) 31, (byte) -4, (byte) 81, (byte) 118, (byte) 115, (byte) -83};
    }

    public static qp$c j6(String str, String str2) {
        if (TextUtils.isEmpty(str)) {
            e.cn().VH("Empty data.");
            return null;
        } else if (TextUtils.isEmpty(str2)) {
            e.cn().VH("Empty signature.");
            return null;
        } else {
            String str3;
            if (e.j6.equals("com.aide.phonegap")) {
                str3 = new String(new qp$b("AIDEkeys".getBytes()).DW(DW));
            } else if (e.j6.equals("com.aide.trainer.java")) {
                str3 = new String(new qp$b("AIDEkeys".getBytes()).DW(Hw));
            } else if (e.j6.equals("com.aide.web")) {
                str3 = new String(new qp$b("AIDEkeys".getBytes()).DW(FH));
            } else {
                str3 = new String(new qp$b("AIDEkeys".getBytes()).DW(j6));
            }
            PublicKey j6 = j6(str3);
            if (!j6(j6, str, str2)) {
                e.cn().VH("Signature does not match data.");
                return null;
            } else if (j6(j6, str + "x", str2)) {
                e.cn().VH("reverse verification failed.");
                return null;
            } else {
                try {
                    JSONObject jSONObject = new JSONObject(str);
                    qp$a j62 = qp$a.j6(jSONObject.getInt("purchaseState"));
                    String string = jSONObject.getString("productId");
                    String string2 = jSONObject.getString("packageName");
                    long j = jSONObject.getLong("purchaseTime");
                    return new qp$c(jSONObject.optString("orderId"), string2, string, j, j62, jSONObject.optString("developerPayload", null), jSONObject.getString("purchaseToken"));
                } catch (Throwable e) {
                    e.cn().VH("JSON parse of datas failed: " + e.getMessage());
                    com.aide.common.e.j6("JSON exception: ", e);
                    return null;
                }
            }
        }
    }

    private static PublicKey j6(String str) {
        try {
            return KeyFactory.getInstance("RSA").generatePublic(new X509EncodedKeySpec(f.j6(str)));
        } catch (Throwable e) {
            e.cn().VH("NSA ex: " + e.getMessage());
            throw new RuntimeException(e);
        } catch (Throwable e2) {
            e.cn().VH("Invalid key spec ex: " + e2.getMessage());
            com.aide.common.e.FH("Invalid key specification.");
            throw new IllegalArgumentException(e2);
        } catch (Throwable e22) {
            e.cn().VH("Base64 decoder ex: " + e22.getMessage());
            com.aide.common.e.FH("Base64 decoding failed.");
            throw new IllegalArgumentException(e22);
        }
    }

    private static boolean j6(PublicKey publicKey, String str, String str2) {
        try {
            Signature instance = Signature.getInstance("SHA1withRSA");
            instance.initVerify(publicKey);
            instance.update(str.getBytes());
            if (instance.verify(f.j6(str2))) {
                return true;
            }
            return false;
        } catch (NoSuchAlgorithmException e) {
            e.cn().VH("NSA ex: " + e.getMessage());
            com.aide.common.e.FH("NoSuchAlgorithmException.");
            return false;
        } catch (InvalidKeyException e2) {
            e.cn().VH("Invalid key ex: " + e2.getMessage());
            com.aide.common.e.FH("Invalid key specification.");
            return false;
        } catch (SignatureException e3) {
            e.cn().VH("Invalid signature ex: " + e3.getMessage());
            com.aide.common.e.FH("Signature exception.");
            return false;
        } catch (h e4) {
            e.cn().VH("Base64 decoder ex: " + e4.getMessage());
            com.aide.common.e.FH("Base64 decoding failed.");
            return false;
        }
    }
}
